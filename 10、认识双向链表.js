// 单向链表
/**
 * 只能从头到尾的或者从尾部遍历的头部
 * 也就是链表链接的过程是单项的
 * 实现的原理的是上一个链表有下一个指向下一个的引用
 * 缺点
 * 我们可以轻松的到达下一个节点，但是回到上一个节点，是比较的难，但是在实际开发过程中，经常会遇到需要回到上一个节点的情况
 * 举个例子
 * 假设：一个文本编辑器用链表来存储文本，每一行用一个String 对象存储在链表的的一个节点中，当编辑器用户向下移动光标时，链表直直接操作
 * 到下一个节点即可，但是当用光标向上移动的呢，这个时候为了回到上一个节点，我可能需要从first开始，依次走到想要的节点上
 * 双向链表
 * 既可以从头遍历到尾部，又可以从尾遍历到头部
 * 也就是链表过程是双的，那他的实现原理的是，
 * 一个节点既有向前链接的引用，也有向后链接的引用，
 * 双向链表可以有效的解决的但像列表中提到的问题
 * 单项列表的缺点
 * 每次插入或者删除某个节点时，需要处理的四个引用。而不是两个，也就是是是想起来比较困难
 * 并且相当于当像列表，必然占用内存空间更大一一些、
 * 但是这些缺点和饥饿我们使用起来的方便程度相比较是微不足道的
 */
// head -> prev item  next 双向列表格式 tail  最后一个列表
